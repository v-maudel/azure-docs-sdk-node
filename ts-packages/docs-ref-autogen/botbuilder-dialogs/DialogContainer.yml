### YamlMime:UniversalReference
items:
  - uid: botbuilder-dialogs.DialogContainer
    name: DialogContainer
    fullName: DialogContainer<R>
    children:
      - botbuilder-dialogs.DialogContainer.dialogBegin
      - botbuilder-dialogs.DialogContainer.constructor
      - botbuilder-dialogs.DialogContainer.dialogContinue
    langs:
      - typeScript
    type: class
    summary: >-
      :package: **botbuilder-dialogs**

      The `DialogContainer` class lets you break your bots logic up into
      components that can be added

      as a dialog to other dialog sets within your bots project. They can even
      be exported and used

      in other bot projects, allowing for the creation of libraries of reusable
      dialog components.


      ### Component Creation


      To create a reusable dialog component you'll want to define a new class
      derived from

      `DialogContainer`. Your component has its own `DialogSet` which you can
      add dialogs to from

      within your classes constructor.  You can add as many dialogs as you like
      and the dialogs can

      be waterfalls, prompts, or even other component dialogs.


      Since developers will add instances of your component to their bots as
      other named dialogs, the

      DialogContainer needs to know the ID of the initial dialog it should start
      anytime it's started.


      Here's a fairly simple example of a `ProfileDialog` that's designed to
      prompt the user to

      enter their name and phone number which it will return as a JSON object to
      the caller:


      ```JavaScript

      const { DialogContainer, TextPrompt } = require('botbuilder-dialogs');


      class ProfileDialog extends DialogContainer {
          constructor() {
              super('fillProfile');

              this.dialogs.add('fillProfile', [
                  async function (dc, options) {
                      dc.instance.state = {};
                      await dc.prompt('textPrompt', `What's your name?`);
                  },
                  async function (dc, name) {
                      dc.instance.state.name = name;
                      await dc.prompt('textPrompt', `What's your phone number?`);
                  },
                  async function (dc, phone) {
                      dc.instance.state.phone = phone;

                      // Return completed profile
                      await dc.end(dc.instance.state);
                 }
             ]);

             this.dialogs.add('textPrompt', new TextPrompt());
          }
      }

      module.exports.ProfileDialog = ProfileDialog;

      ```


      We've added two dialogs to our component, a waterfall and a prompt. And
      we've told the

      DialogContainer that it should start the 'fillProfile' dialog anytime an
      instance of the

      `ProfileDialog` is started. The DialogContainer will manager persisting
      the controls dialog

      stack to the callers dialog stack.


      ### Component Usage


      On the consumption side the dialog we created can be used by a bot in much
      the same way they

      would use any other prompt. They can add a new instance of the component
      as a named dialog to

      their bots `DialogSet` and then start it using a call to
      `DialogContext.begin()`. If the

      dialog accepts options these can be passed in to the `begin()` call and
      the `DialogContainer`

      will pass them through as args to the initial dialog it starts.


      ```JavaScript

      const { DialogSet } = require('botbuilder-dialogs');

      const { ProfileDialog } = require('./profileControl');


      const dialogs = new DialogSet();


      dialogs.add('getProfile', new ProfileDialog());


      dialogs.add('firstrun', [
           async function (dc) {
               await dc.context.sendActivity(`Welcome! We need to ask a few questions to get started.`);
               await dc.begin('getProfile');
           },
           async function (dc, profile) {
               await dc.context.sendActivity(`Thanks ${profile.name}!`);
               await dc.end();
           }
      ]);

      ```
    extends:
      name: botbuilder-dialogs.Dialog<C>
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.DialogContainer.dialogBegin
    name: dialogBegin
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function dialogBegin(dc: DialogContext<C>, dialogArgs?: any)'
      parameters:
        - id: dc
          type:
            - botbuilder-dialogs.DialogContext<C>
          description: ''
        - id: dialogArgs
          type:
            - any
          description: ''
          optional: true
      return:
        type:
          - Promise<any>
  - uid: botbuilder-dialogs.DialogContainer.constructor
    name: DialogContainer
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new `DialogContainer` instance.
    syntax:
      content: 'new DialogContainer(initialDialogId: string, dialogs?: DialogSet<C>)'
      parameters:
        - id: initialDialogId
          type:
            - string
          description: >-
            ID of the dialog, within the containers dialog set, that should be
            started anytime an instance of the `DialogContainer` is started.
        - id: dialogs
          type:
            - botbuilder-dialogs.DialogSet<C>
          description: >
            (Optional) set of existing dialogs the container should use. If
            omitted an empty set will be created.
          optional: true
  - uid: botbuilder-dialogs.DialogContainer.dialogContinue
    name: dialogContinue
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function dialogContinue(dc: DialogContext<C>)'
      parameters:
        - id: dc
          type:
            - botbuilder-dialogs.DialogContext<C>
          description: ''
      return:
        type:
          - Promise<any>
references:
  - uid: botbuilder-dialogs.Dialog<C>
    spec.typeScript:
      - name: Dialog
        fullName: Dialog
        uid: botbuilder-dialogs.Dialog
      - name: <C>
        fullName: <C>
  - uid: botbuilder-dialogs.DialogSet<C>
    spec.typeScript:
      - name: DialogSet
        fullName: DialogSet
        uid: botbuilder-dialogs.DialogSet
      - name: <C>
        fullName: <C>
  - uid: botbuilder-dialogs.DialogContext<C>
    spec.typeScript:
      - name: DialogContext
        fullName: DialogContext
        uid: botbuilder-dialogs.DialogContext
      - name: <C>
        fullName: <C>
