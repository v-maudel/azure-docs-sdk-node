### YamlMime:UniversalReference
items:
  - uid: botbuilder-dialogs.OAuthPrompt
    name: OAuthPrompt
    fullName: OAuthPrompt<C>
    children:
      - botbuilder-dialogs.OAuthPrompt.dialogBegin
      - botbuilder-dialogs.OAuthPrompt.dialogContinue
      - botbuilder-dialogs.OAuthPrompt.constructor
      - botbuilder-dialogs.OAuthPrompt.signOutUser
    langs:
      - typeScript
    type: class
    summary: >-
      :package: **botbuilder-dialogs**

      Creates a new prompt that asks the user to sign in using the Bot
      Frameworks Single Sign On (SSO)

      service. The prompt will attempt to retrieve the users current token and
      if the user isn't

      signed in, it will send them an `OAuthCard` containing a button they can
      press to signin.

      Depending on the channel, the user will be sent through one of two
      possible signin flows:


      - The automatic signin flow where once the user signs in and the SSO
      service will forward the bot

      the users access token using either an `event` or `invoke` activity.

      - The "magic code" flow where where once the user signs in they will be
      prompted by the SSO

      service to send the bot a six digit code confirming their identity. This
      code will be sent as a

      standard `message` activity.


      Both flows are automatically supported by the `OAuthPrompt` and the only
      thing you need to be

      careful of is that you don't block the `event` and `invoke` activities
      that the prompt might

      be waiting on.


      ### Prompt Usage


      When used with your bots `DialogSet` you can simply add a new instance of
      the prompt as a named

      dialog using `DialogSet.add()`. You can then start the prompt from a
      waterfall step using either

      `DialogContext.begin()` or `DialogContext.prompt()`. The user will be
      prompted to signin as

      needed and their access token will be passed as an argument to the callers
      next waterfall step:


      ```JavaScript

      const { DialogSet, OAuthPrompt } = require('botbuilder-dialogs');


      const dialogs = new DialogSet();


      dialogs.add('loginPrompt', new OAuthPrompt({
         connectionName: 'GitConnection',
         title: 'Login To GitHub',
         timeout: 300000   // User has 5 minutes to login
      }));


      dialogs.add('taskNeedingLogin', [
           async function (dc) {
               await dc.begin('loginPrompt');
           },
           async function (dc, token) {
               if (token) {
                   // Continue with task needing access token
               } else {
                   await dc.context.sendActivity(`Sorry... We couldn't log you in. Try again later.`);
                   await dc.end();
               }
           }
      ]);

      ```
    extends:
      name: botbuilder-dialogs.Dialog<C>
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.OAuthPrompt.dialogBegin
    name: dialogBegin
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function dialogBegin(dc: DialogContext<C>, options: PromptOptions)'
      parameters:
        - id: dc
          type:
            - botbuilder-dialogs.DialogContext<C>
          description: ''
        - id: options
          type:
            - botbuilder-dialogs.PromptOptions
          description: ''
      return:
        type:
          - Promise<any>
  - uid: botbuilder-dialogs.OAuthPrompt.dialogContinue
    name: dialogContinue
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function dialogContinue(dc: DialogContext<C>)'
      parameters:
        - id: dc
          type:
            - botbuilder-dialogs.DialogContext<C>
          description: ''
      return:
        type:
          - Promise<any>
  - uid: botbuilder-dialogs.OAuthPrompt.constructor
    name: OAuthPrompt
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new `OAuthPrompt` instance.
    syntax:
      content: >-
        new OAuthPrompt(settings: OAuthPromptSettingsWithTimeout, validator?:
        PromptValidator<any, any>)
      parameters:
        - id: settings
          type:
            - botbuilder-dialogs.OAuthPromptSettingsWithTimeout
          description: Settings used to configure the prompt.
        - id: validator
          type:
            - 'PromptValidator<any, any>'
          description: >
            (Optional) validator that will be called each time the user responds
            to the prompt. If the validator replies with a message no additional
            retry prompt will be sent.
          optional: true
  - uid: botbuilder-dialogs.OAuthPrompt.signOutUser
    name: signOutUser
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Signs the user out of the service.
      **Usage Example:**

      ```JavaScript
      const prompt = new OAuthPrompt({
         connectionName: 'GitConnection',
         title: 'Login To GitHub'
      });
      await prompt.signOutUser(context);
      ```
    syntax:
      content: 'function signOutUser(context: TurnContext)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: |+

      return:
        type:
          - Promise<void>
references:
  - uid: botbuilder-dialogs.Dialog<C>
    spec.typeScript:
      - name: Dialog
        fullName: Dialog
        uid: botbuilder-dialogs.Dialog
      - name: <C>
        fullName: <C>
  - uid: botbuilder-dialogs.OAuthPromptSettingsWithTimeout
    spec.typeScript:
      - name: OAuthPromptSettingsWithTimeout
        fullName: OAuthPromptSettingsWithTimeout
        uid: botbuilder-dialogs.OAuthPromptSettingsWithTimeout
  - uid: botbuilder-dialogs.DialogContext<C>
    spec.typeScript:
      - name: DialogContext
        fullName: DialogContext
        uid: botbuilder-dialogs.DialogContext
      - name: <C>
        fullName: <C>
  - uid: botbuilder-dialogs.PromptOptions
    spec.typeScript:
      - name: PromptOptions
        fullName: PromptOptions
        uid: botbuilder-dialogs.PromptOptions
