### YamlMime:UniversalReference
items:
  - uid: botbuilder-azure.TableServiceAsync
    name: TableServiceAsync
    fullName: TableServiceAsync
    children:
      - botbuilder-azure.TableServiceAsync.createTableIfNotExistsAsync
      - botbuilder-azure.TableServiceAsync.deleteEntityAsync
      - botbuilder-azure.TableServiceAsync.deleteTableIfExistsAsync
      - botbuilder-azure.TableServiceAsync.insertOrReplaceEntityAsync
      - botbuilder-azure.TableServiceAsync.TableService.PropertyResolver
      - botbuilder-azure.TableServiceAsync.replaceEntityAsync
      - botbuilder-azure.TableServiceAsync.retrieveEntityAsync
    langs:
      - typeScript
    type: interface
    summary: ''
    extends:
      name: TableService
    package: botbuilder-azure
  - uid: botbuilder-azure.TableServiceAsync.createTableIfNotExistsAsync
    name: createTableIfNotExistsAsync
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createTableIfNotExistsAsync(table: string)'
      parameters:
        - id: table
          type:
            - string
          description: ''
      return:
        type:
          - Promise<TableResult>
  - uid: botbuilder-azure.TableServiceAsync.deleteEntityAsync
    name: deleteEntityAsync
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteEntityAsync<T>(table: string, entityDescriptor: T)'
      parameters:
        - id: table
          type:
            - string
          description: ''
        - id: entityDescriptor
          type:
            - T
          description: ''
      return:
        type:
          - Promise<void>
  - uid: botbuilder-azure.TableServiceAsync.deleteTableIfExistsAsync
    name: deleteTableIfExistsAsync
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteTableIfExistsAsync(table: string)'
      parameters:
        - id: table
          type:
            - string
          description: ''
      return:
        type:
          - Promise<boolean>
  - uid: botbuilder-azure.TableServiceAsync.insertOrReplaceEntityAsync
    name: insertOrReplaceEntityAsync
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function insertOrReplaceEntityAsync<T>(table: string, entityDescriptor:
        T)
      parameters:
        - id: table
          type:
            - string
          description: ''
        - id: entityDescriptor
          type:
            - T
          description: ''
      return:
        type:
          - Promise<EntityMetadata>
  - uid: botbuilder-azure.TableServiceAsync.TableService.PropertyResolver
    name: PropertyResolver
    fullName: PropertyResolver
    children: []
    langs:
      - typeScript
    type: interface
    summary: ''
    package: botbuilder-azure
    module: TableService
  - uid: botbuilder-azure.TableServiceAsync.replaceEntityAsync
    name: replaceEntityAsync
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function replaceEntityAsync<T>(table: string, entityDescriptor: T)'
      parameters:
        - id: table
          type:
            - string
          description: ''
        - id: entityDescriptor
          type:
            - T
          description: ''
      return:
        type:
          - Promise<EntityMetadata>
  - uid: botbuilder-azure.TableServiceAsync.retrieveEntityAsync
    name: retrieveEntityAsync
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function retrieveEntityAsync<T>(table: string, partitionKey: string,
        rowKey: string, options: any)
      parameters:
        - id: table
          type:
            - string
          description: ''
        - id: partitionKey
          type:
            - string
          description: ''
        - id: rowKey
          type:
            - string
          description: ''
        - id: options
          type:
            - any
          description: ''
      return:
        type:
          - Promise<T>
