### YamlMime:UniversalReference
items:
  - uid: botbuilder-prompts.NumberPrompt
    name: NumberPrompt
    fullName: NumberPrompt<O>
    children:
      - botbuilder-prompts.NumberPrompt.prompt
      - botbuilder-prompts.NumberPrompt.recognize
    langs:
      - typeScript
    type: interface
    summary: |-
      :package: **botbuilder-prompts**
      Prompts the user to reply with a number.

      **Usage Example:**

      ```JavaScript
      const { createNumberPrompt } = require('botbuilder-prompts');

      const agePrompt = createNumberPrompt();
      ```
    package: botbuilder-prompts
  - uid: botbuilder-prompts.NumberPrompt.prompt
    name: prompt
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Sends a formated prompt to the user.
      **Usage Example:**

      ```JavaScript
      await agePrompt.prompt(context, `How old are you?`);
      ```
    syntax:
      content: >-
        function prompt(context: TurnContext, prompt: string |
        Partial<Activity>, speak?: string)
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for the current turn of conversation.
        - id: prompt
          type:
            - string | Partial<Activity>
          description: Text or activity to send as the prompt.
        - id: speak
          type:
            - string
          description: >
            (Optional) SSML that should be spoken for prompt. The prompts
            `inputHint` will be automatically set to `expectingInput`.
          optional: true
      return:
        type:
          - Promise<void>
  - uid: botbuilder-prompts.NumberPrompt.recognize
    name: recognize
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Recognizes and validates the users reply. The result of the call will
      either be the

      recognized value or `undefined`.

      The recognize() method will not automatically re-prompt the user so either
      the caller or the

      prompts custom validator will need to implement re-prompting logic.


      **Usage Example:**


      ```JavaScript

      const age = await agePrompt.recognize(context);

      if (typeof age == 'number') {
         // Save age and continue
      }

      ```
    syntax:
      content: 'function recognize(context: TurnContext)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: |
            Context for the current turn of conversation.
      return:
        type:
          - Promise<O | undefined>
references:
  - uid: botbuilder-prompts.PromptValidator<O>
    spec.typeScript:
      - name: PromptValidator
        fullName: PromptValidator
        uid: botbuilder-prompts.PromptValidator
      - name: <O>
        fullName: <O>
  - uid: botbuilder-prompts.ConfirmPrompt<O>
    spec.typeScript:
      - name: ConfirmPrompt
        fullName: ConfirmPrompt
        uid: botbuilder-prompts.ConfirmPrompt
      - name: <O>
        fullName: <O>
