### YamlMime:UniversalReference
items:
  - uid: botbuilder-prompts.OAuthPrompt
    name: OAuthPrompt
    fullName: OAuthPrompt<O>
    children:
      - botbuilder-prompts.OAuthPrompt.getUserToken
      - botbuilder-prompts.OAuthPrompt.prompt
      - botbuilder-prompts.OAuthPrompt.recognize
      - botbuilder-prompts.OAuthPrompt.signOutUser
    langs:
      - typeScript
    type: interface
    summary: >-
      :package: **botbuilder-prompts**

      Prompts the user to sign in using the Bot Frameworks Single Sign On (SSO)
      service.


      **Usage Example:**


      ```JavaScript

      const { createOAuthPrompt } = require('botbuilder-prompts');


      const loginPrompt = createOAuthPrompt({
         connectionName: 'GitConnection',
         title: 'Login To GitHub'
      });

      ```
    package: botbuilder-prompts
  - uid: botbuilder-prompts.OAuthPrompt.getUserToken
    name: getUserToken
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Attempts to retrieve the cached token for a signed in user. You will
      generally want to call

      this before calling [prompt()](#prompt) to send the user a signin card.

      **Usage Example:**


      ```JavaScript

      const token = await loginPrompt.getUserToken(context);

      if (!token) {
         await loginPrompt.prompt(context);
      }

      ```
    syntax:
      content: 'function getUserToken(context: TurnContext)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: |
            Context for the current turn of conversation.
      return:
        type:
          - Promise<O | undefined>
  - uid: botbuilder-prompts.OAuthPrompt.prompt
    name: prompt
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sends a formated prompt to the user.

      An `OAuthCard` will be automatically created and sent to the user
      requesting them to

      signin. If you need to localize the card or customize the message sent to
      the user for any

      reason you can pass in the `Activity` to send. This should just be an
      activity of type

      `message` and contain at least one attachment that's an `OAuthCard`.


      **Usage Example:**


      ```JavaScript

      await loginPrompt.prompt(context);

      ```
    syntax:
      content: 'function prompt(context: TurnContext, prompt?: Partial<Activity>)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for the current turn of conversation.
        - id: prompt
          type:
            - Partial<Activity>
          description: >
            (Optional) activity to send along the user. This should include an
            attachment containing an `OAuthCard`. If ommited, an activity will
            be automatically generated.
          optional: true
      return:
        type:
          - Promise<void>
  - uid: botbuilder-prompts.OAuthPrompt.recognize
    name: recognize
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Attempts to resolve the token after [prompt()](#prompt) has been called.
      There are two core

      flows that need to be supported to complete a users signin:

      - The automatic signin flow where the SSO service will forward the bot the
      users access

      token using either an `event` or `invoke` activity.

      - The "magic code" flow where a user is prompted by the SSO service to
      send the bot a six

      digit code confirming their identity. This code will be sent as a standard
      `message` activity.


      The `recognize()` method automatically handles both flows for the bot but
      you should ensure

      that you don't accidentally filter out the `event` and `invoke` activities
      before calling

      recognize().  Because of this we generally recommend you put the call to
      recognize() towards

      the beginning of your bot logic.


      You should also be prepared for the case where the user fails to enter the
      correct

      "magic code" or simply decides they don't want to click the signin button.


      **Usage Example:**


      ```JavaScript

      const token = await loginPrompt.recognize(context);

      if (token) {
         // Save token and continue.
      }

      ```
    syntax:
      content: 'function recognize(context: TurnContext)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for the current turn of conversation.
      return:
        type:
          - Promise<O | undefined>
  - uid: botbuilder-prompts.OAuthPrompt.signOutUser
    name: signOutUser
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Signs the user out of the service.
      **Usage Example:**

      ```JavaScript
      await loginPrompt.signOutUser(context);
      ```
    syntax:
      content: 'function signOutUser(context: TurnContext)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: |
            Context for the current turn of conversation.
      return:
        type:
          - Promise<void>
